NAME: n8n
LAST DEPLOYED: Sun Jan 19 13:35:08 2025
NAMESPACE: n8n
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: n8n/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "n8n-test-connection"
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/version: "1.74.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: alpine
      command: ['wget']
      args: ['n8n:']
  restartPolicy: Never
MANIFEST:
---
# Source: n8n/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/version: "1.74.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: n8n/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secret-n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/version: "1.74.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
    N8N_ENCRYPTION_KEY: cmFuZG9tX3N0cmluZ19wYXNzd29yZA==
    N8N_TEST: c3RyaW5n
---
# Source: n8n/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config-n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/version: "1.74.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    N8N_DB_TYPE=sqlite
    N8N_ENCRYPTION_KEY=
---
# Source: n8n/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/version: "1.74.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP_
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/type: master
---
# Source: n8n/templates/deployment.worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n-worker
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/version: "1.74.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: n8n
      app.kubernetes.io/instance: n8n
      app.kubernetes.io/type: worker
  template:
    metadata:
      annotations:
        checksum/config: 5efd3d9b246b466bc906361c6f900a552ae36bd583f6329d4499149918f9112a
      labels:
        app.kubernetes.io/name: n8n
        app.kubernetes.io/instance: n8n
        app.kubernetes.io/type: worker

    spec:
      serviceAccountName: n8n
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: n8n-worker
          securityContext:
            {}
          image: "n8nio/n8n:1.74.1"
          imagePullPolicy: IfNotPresent
          command: ["n8n"]
          args:
            - "worker"
            - "--concurrency=2"
          ports:
            - name: http
              containerPort: 5678
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          volumeMounts:
            - name: data
              mountPath: /home/node/.n8n
      volumes:
        - name: "data"
          emptyDir: {}
---
# Source: n8n/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  labels:
    helm.sh/chart: n8n-1.0.0
    app.kubernetes.io/name: n8n
    app.kubernetes.io/instance: n8n
    app.kubernetes.io/version: "1.74.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: n8n
      app.kubernetes.io/instance: n8n
      app.kubernetes.io/type: master
  template:
    metadata:
      annotations:
        checksum/config: 5efd3d9b246b466bc906361c6f900a552ae36bd583f6329d4499149918f9112a
      labels:
        app.kubernetes.io/name: n8n
        app.kubernetes.io/instance: n8n
        app.kubernetes.io/type: master
    spec:
      serviceAccountName: n8n
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: n8n
          securityContext:
            {}
          image: "n8nio/n8n:1.74.1"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: app-config-n8n
            - secretRef:
                name: app-secret-n8n
          lifecycle:
            {}
          ports:
            - name: http
              containerPort: 5678
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          volumeMounts:
            - name: data
              mountPath: /home/node/.n8n
      volumes:
        - name: "data"
          emptyDir: {}

NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace n8n -l "app.kubernetes.io/name=n8n,app.kubernetes.io/instance=n8n" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace n8n $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace n8n port-forward $POD_NAME 8080:$CONTAINER_PORT
